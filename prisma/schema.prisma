// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DB_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String   @db.Text
  type               String
  provider           String
  providerAccountId  String   @db.VarChar(256)
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id                  String    @id @default(cuid())
  post                Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId              String
  userId              String
  dateTime            DateTime  @default(now())
  content             String
  replies             Reply[]
}

model Post {
  id                  String    @id @default(cuid())
  slug                String    @unique
  audioURL            String?
  likeCount           Int       @default(0)
  saveCount           Int       @default(0)

  comments            Comment[]
  likes               PostLike[]
  saves               PostSave[]
}

model PostLike {
  post                Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId              String
  userId              String

  @@id([postId, userId])
}

model PostSave {
  post                Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId              String
  userId              String

  @@id([postId, userId])
}

model Reply {
  id                  String    @id @default(cuid())
  comment             Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId           String
  userId              String
  dateTime            DateTime  @default(now())
  content             String
}

model Role {
  id                  String    @id @default(cuid())
  slug                String    @unique
  title               String
  description         String?
  users               User[]

  @@unique([id, title])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @db.VarChar(256)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?
  role          Role?  @relation(fields: [roleId, roleTitle], references: [id, title], onDelete: Cascade)
  roleId        String?
  roleTitle     String?
  
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  replies       Reply[]
  likes         PostLike[]
  saves         PostSave[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}